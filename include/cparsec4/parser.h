// -*- coding: utf-8-unix -*-

// Copyright (c) 2023 Daishi Mori (mori0091)
//
// This software is released under the MIT License.
// See https://github.com/mori0091/cparsec4/blob/main/LICENSE
//
// GitHub cparsec4 project
// https://github.com/mori0091/cparsec4

#ifndef CPARSEC4_PARSER_H_
#define CPARSEC4_PARSER_H_

/**
 * Typename of a parser.
 *
 * \param Input   Typename of input stream type of the parser.
 * \param Output  Typename of output type of the parser.
 */
#define Parser(Input, Output) internal

/**
 * Typename of result of a parser.
 *
 * ~~~c
 * typedef struct {
 *   Input input; ///< remaining input
 *   union {
 *     Output       ok;  ///< ok value
 *     ERROR(Input) err; ///< err value
 *   };
 *   bool is_err; ///< true if the result is err.
 * } ParseResult(Input, Output);
 * ~~~
 *
 * \param Input   Typename of input stream type of the parser.
 * \param Output  Typename of output type of the parser.
 */
#define ParseResult(Input, Output) internal

/**
 * Typename of reply of a parser.
 *
 * ~~~c
 * typedef struct {
 *    bool consumed;  ///< true if some tokens were consumed.
 *    ParseResult(Input, Output) result;  ///< ok or err reuslt.
 * } ParseReply(Input, Output);
 * ~~~
 *
 * \param Input   Typename of input stream type of the parser.
 * \param Output  Typename of output type of the parser.
 */
#define ParseReply(Input, Output) internal

/**
 * Define `Parser(Input, Output)`, `ParseResult(Input, Output)`, and
 * `trait(Parser(Input, Output))`.
 *
 * Also generate code of `trait(Parser(Input, Output))` if `IMPLEMENT`
 * macro was defined.
 *
 * \param Input   Typename of input stream type of the parser.
 * \param Output  Typename of output type of the parser.
 */
#if !defined(IMPLEMENT)
#define use_Parser(Input, Output) def_Parser(Input, Output)
#else
#define use_Parser(Input, Output)                                        \
  def_Parser(Input, Output);                                             \
  impl_Parser(Input, Output)
#endif

/**
 * Implement a parser.
 *
 * The parser() macro is a primitive for implementing the parser
 * constructor and function body. The parser constructor code is
 * automatically generated by the parser() macro. The function body of the
 * parser must be defined in the trailing block following the macro.
 *
 * - `parser(I, O, name) {...}`
 *   - Define constructor `Parser(I, O) name(void)`.
 * - `parser(I, O, name, T1) {...}`
 *   - Define constructor `Parser(I, O) name(T1 x1)`.
 * - `parser(I, O, name, T1, T2) {...}`
 *   - Define constructor `Parser(I, O) name(T1 x1, T2, x2)`.
 * - `parser(I, O, name, T1, T2, T3) {...}`
 *   - Define constructor `Parser(I, O) name(T1 x1, T2 x2, T3 x3)`.
 *
 * An instance of the parser is constructed by calling to the defined
 * constructor.
 *
 * Trailing block (`{...}`) is function body of the parser. The function
 * body will be executed when the parser is applied to an input by calling
 * to `trait(Parser(I, O)).parse(parser, input)`.
 *
 * In the function body, the following convenient macros are available for
 * use:
 *
 * - `PARAM`
 *   - tuple of parameters passed to the constructor.
 *   - `PARAM._0` is `x1` of type `T1`,
 *   - `PARAM._1` is `x2` of type `T2`,
 *   - `PARAM._2` is `x3` of type `T3`, respectively.
 *
 * - `INPUT`
 *   - the input passed to the parse() method.
 *
 * - `CONSUMED_OK(I, O, ok)`
 *   - returns 'consumed ok' result with 'ok' value.
 *   - it means the parser succeeded to parse with consuming some input.
 *
 * - `CONSUMED_ERR(I, O, err)`
 *   - returns 'consumed error' result with 'err' value.
 *   - it means the parser failed to parse with consuming some input.
 *
 * - `EMPTY_OK(I, O, ok)`
 *   - returns 'empty ok' result with 'ok' value.
 *   - it means the parser succeeded to parse without consuming any input.
 *
 * - `EMPTY_ERR(I, O, err)`
 *   - returns 'empty error' result with 'err' value.
 *   - it means the parser failed to parse without consuming any input.
 *
 *
 * \param I     Typename of input stream type of the parser.
 * \param O     Typename of output type of the parser.
 * \param name  Name of parser constructor.
 * \param ...   List of typenames of type of parameter. (optional)
 */
#define parser(I, O, name, ...) internal

/**
 * Tuple of parameters passed to the parser constructor.
 * \sa parser()
 */
#define PARAM (args->_0)

/**
 * The input passed to the parse() method.
 * \sa parser()
 */
#define INPUT (args->_1)

/**
 * Returns 'consumed ok' result with 'ok' value.
 * \param I     Typename of input stream type of the parser.
 * \param O     Typename of output type of the parser.
 * \param ok    Ok value.
 * \sa parser()
 */
#define CONSUMED_OK(I, O, ok)                                            \
  return trait(ParseReply(I, O)).Ok(true, INPUT, (ok))

/**
 * Returns 'consumed error' result with 'err' value.
 * \param I     Typename of input stream type of the parser.
 * \param O     Typename of output type of the parser.
 * \param err   Err value.
 * \sa parser()
 */
#define CONSUMED_ERR(I, O, err)                                          \
  return trait(ParseReply(I, O)).Err(true, INPUT, (err))

/**
 * Returns 'empty ok' result with 'ok' value.
 * \param I     Typename of input stream type of the parser.
 * \param O     Typename of output type of the parser.
 * \param ok    Ok value.
 * \sa parser()
 */
#define EMPTY_OK(I, O, ok)                                               \
  return trait(ParseReply(I, O)).Ok(false, INPUT, (ok))

/**
 * Returns 'empty error' result with 'err' value.
 * \param I     Typename of input stream type of the parser.
 * \param O     Typename of output type of the parser.
 * \param err   Err value.
 * \sa parser()
 */
#define EMPTY_ERR(I, O, err)                                             \
  return trait(ParseReply(I, O)).Err(false, INPUT, (err))

#include "./internal/parser.h"

#endif // CPARSEC4_PARSER_H_
